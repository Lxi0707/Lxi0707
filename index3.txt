<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Classic Tetris</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: 'Segoe UI', sans-serif;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      background: url('https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=1920&q=80') no-repeat center center fixed;
      background-size: cover;
    }
    h1 {
      text-shadow: 2px 2px 5px rgba(0,0,0,0.7);
      margin-bottom: 0.5em;
    }
    #game {
      background: #111;
      width: 240px;
      height: 400px;
      margin: 1em auto;
      box-shadow: 0 0 20px rgba(0,0,0,0.8);
    }
    p {
      font-size: 0.9em;
      text-shadow: 1px 1px 3px rgba(0,0,0,0.6);
    }
    footer {
      font-size: 0.8em;
      color: #ccc;
      margin-top: 2em;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.6);
    }
  </style>
</head>
<body>
  <h1>Classic Tetris</h1>
  <p>Score: <span id="score">0</span> | ↑←→↓ to move | Space to drop | R to restart</p>
  <canvas id="game" width="240" height="400"></canvas>
  <footer>&copy; 2025 Tetris Web Edition</footer>

  <script>
    const canvas = document.getElementById('game');
    const context = canvas.getContext('2d');
    context.scale(20, 20);

    const matrix = {
      'T': [[0,1,0],[1,1,1],[0,0,0]],
      'O': [[2,2],[2,2]],
      'L': [[0,0,3],[3,3,3],[0,0,0]],
      'J': [[4,0,0],[4,4,4],[0,0,0]],
      'I': [[0,0,0,0],[5,5,5,5],[0,0,0,0],[0,0,0,0]],
      'S': [[0,6,6],[6,6,0],[0,0,0]],
      'Z': [[7,7,0],[0,7,7],[0,0,0]]
    };

    const colors = [null, '#f0f', '#ff0', '#f90', '#09f', '#0ff', '#0f0', '#f00'];

    let arena = createMatrix(12, 20);
    let player = {
      pos: {x: 0, y: 0},
      matrix: null,
      score: 0
    };

    function createMatrix(w, h) {
      const matrix = [];
      while (h--) matrix.push(new Array(w).fill(0));
      return matrix;
    }

    function createPiece(type) {
      return matrix[type];
    }

    function merge(arena, player) {
      player.matrix.forEach((row, y) => {
        row.forEach((value, x) => {
          if (value !== 0) {
            arena[y + player.pos.y][x + player.pos.x] = value;
          }
        });
      });
    }

    function collide(arena, player) {
      const [m, o] = [player.matrix, player.pos];
      for (let y = 0; y < m.length; y++) {
        for (let x = 0; x < m[y].length; x++) {
          if (m[y][x] !== 0 &&
              (arena[y + o.y] && arena[y + o.y][x + o.x]) !== 0) {
            return true;
          }
        }
      }
      return false;
    }

    function rotate(matrix, dir) {
      for (let y = 0; y < matrix.length; ++y) {
        for (let x = 0; x < y; ++x) {
          [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
        }
      }
      if (dir > 0) {
        matrix.forEach(row => row.reverse());
      } else {
        matrix.reverse();
      }
    }

    function playerDrop() {
      player.pos.y++;
      if (collide(arena, player)) {
        player.pos.y--;
        merge(arena, player);
        playerReset();
        arenaSweep();
        updateScore();
      }
      dropCounter = 0;
    }

    function playerMove(dir) {
      player.pos.x += dir;
      if (collide(arena, player)) {
        player.pos.x -= dir;
      }
    }

    function playerReset() {
      const pieces = 'TJLOSZI';
      player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
      player.pos.y = 0;
      player.pos.x = (arena[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);
      if (collide(arena, player)) {
        arena.forEach(row => row.fill(0));
        player.score = 0;
        updateScore();
      }
    }

    function playerRotate(dir) {
      const pos = player.pos.x;
      let offset = 1;
      rotate(player.matrix, dir);
      while (collide(arena, player)) {
        player.pos.x += offset;
        offset = -(offset + (offset > 0 ? 1 : -1));
        if (offset > player.matrix[0].length) {
          rotate(player.matrix, -dir);
          player.pos.x = pos;
          return;
        }
      }
    }

    function arenaSweep() {
      let rowCount = 1;
      outer: for (let y = arena.length - 1; y >= 0; --y) {
        for (let x = 0; x < arena[y].length; ++x) {
          if (arena[y][x] === 0) {
            continue outer;
          }
        }
        const row = arena.splice(y, 1)[0].fill(0);
        arena.unshift(row);
        player.score += rowCount * 10;
        rowCount *= 2;
      }
    }

    function drawMatrix(matrix, offset) {
      matrix.forEach((row, y) => {
        row.forEach((value, x) => {
          if (value !== 0) {
            context.fillStyle = colors[value];
            context.fillRect(x + offset.x, y + offset.y, 1, 1);
          }
        });
      });
    }

    function draw() {
      context.fillStyle = '#111';
      context.fillRect(0, 0, canvas.width, canvas.height);
      drawMatrix(arena, {x: 0, y: 0});
      drawMatrix(player.matrix, player.pos);
    }

    function updateScore() {
      document.getElementById('score').textContent = player.score;
    }

    let dropCounter = 0;
    let dropInterval = 1000;
    let lastTime = 0;

    function update(time = 0) {
      const deltaTime = time - lastTime;
      lastTime = time;
      dropCounter += deltaTime;
      if (dropCounter > dropInterval) {
        playerDrop();
      }
      draw();
      requestAnimationFrame(update);
    }

    document.addEventListener('keydown', event => {
      if (event.key === 'ArrowLeft') playerMove(-1);
      else if (event.key === 'ArrowRight') playerMove(1);
      else if (event.key === 'ArrowDown') playerDrop();
      else if (event.key === 'ArrowUp') playerRotate(1);
      else if (event.key === ' ') playerDrop();
      else if (event.key.toLowerCase() === 'r') {
        playerReset();
      }
    });

    playerReset();
    updateScore();
    update();
  </script>
</body>
</html>
